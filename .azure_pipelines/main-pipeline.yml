parameters:
  - name: environment
    type: string
    default: 'dev'
  - name: projectName
    type: string
    default: 'evo-taskers'
  - name: appName
    type: string
    default: 'unlockbookings'

variables:
  - group: 'terraform-backend'
  - name: workingDirectory
    value: 'project/${{ parameters.projectName }}/${{ parameters.appName }}'

stages:
- stage: Plan
  displayName: 'Terraform Plan'
  jobs:
  - job: Plan
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      inputs:
        terraformVersion: '1.5.0'  # Or latest

    - task: AzureCLI@2
      displayName: 'Set OIDC Auth Vars'
      name: setAuthVars  # Names the step so vars are accessible downstream
      inputs:
        azureSubscription: ${{ variables.AzureRMConnection }}  # Your WIF service connection
        scriptType: pscore  # PowerShell Core for cross-platform
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]true"
          Write-Host "##vso[task.setvariable variable=ARM_OIDC_TOKEN;isOutput=true]$env:AZURE_FEDERATED_TOKEN"
          Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]$env:ARM_CLIENT_ID"
          Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]$env:ARM_TENANT_ID"
          $subId = az account show --query id -o tsv
          Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]$subId"

    - task: AzureCLI@2
      displayName: 'Verify WIF Auth'
      inputs:
        azureSubscription: ${{ variables.AzureRMConnection }}
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "ARM_CLIENT_ID: $env:ARM_CLIENT_ID"
          Write-Host "ARM_TENANT_ID: $env:ARM_TENANT_ID"
          Write-Host "ARM_SUBSCRIPTION_ID: $env:ARM_SUBSCRIPTION_ID"
          az account show


    - task: Bash@3
      displayName: 'Terraform Init'
      inputs:
        targetType: 'inline'
        workingDirectory: ${{ variables.workingDirectory }}
        script: |
          terraform init \
            -backend-config="resource_group_name=${{ variables.BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ variables.BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ variables.BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ parameters.projectName }}-${{ parameters.appName }}-${{ parameters.environment }}.tfstate"
      env:
        ARM_USE_OIDC: $(setAuthVars.ARM_USE_OIDC)
        ARM_OIDC_TOKEN: $(setAuthVars.ARM_OIDC_TOKEN)
        ARM_CLIENT_ID: $(setAuthVars.ARM_CLIENT_ID)
        ARM_TENANT_ID: $(setAuthVars.ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(setAuthVars.ARM_SUBSCRIPTION_ID)

    - task: Bash@3
      displayName: 'Terraform Plan'
      inputs:
        targetType: 'inline'
        workingDirectory: ${{ variables.workingDirectory }}
        script: terraform plan -out=tfplan -var-file="${{ parameters.environment }}.tfvars"
      env:
        ARM_USE_OIDC: $(setAuthVars.ARM_USE_OIDC)
        ARM_OIDC_TOKEN: $(setAuthVars.ARM_OIDC_TOKEN)
        ARM_CLIENT_ID: $(setAuthVars.ARM_CLIENT_ID)
        ARM_TENANT_ID: $(setAuthVars.ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(setAuthVars.ARM_SUBSCRIPTION_ID)
      name: terraformPlan  # For condition in Apply

    # Optional: Publish plan as artifact for Apply stage
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/${{ variables.workingDirectory }}/tfplan'
        artifact: 'tfplan'
        publishLocation: 'pipeline'

- stage: Apply
  displayName: 'Terraform Apply'
  dependsOn: Plan
  condition: and(succeeded(), eq(variables.terraformPlan.changesPresent, 'true'))  # Only if changes
  jobs:
  - deployment: Apply
    environment: '${{ parameters.projectName }}-${{ parameters.environment }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'tfplan'
              targetPath: '$(Pipeline.Workspace)/${{ variables.workingDirectory }}'

          - task: AzureCLI@2
            displayName: 'Set OIDC Auth Vars (Apply)'
            name: setAuthVarsApply
            inputs:
              azureSubscription: ${{ variables.AzureRMConnection }}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]true"
                Write-Host "##vso[task.setvariable variable=ARM_OIDC_TOKEN;isOutput=true]$env:AZURE_FEDERATED_TOKEN"
                Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]$env:ARM_CLIENT_ID"
                Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]$env:ARM_TENANT_ID"
                $subId = az account show --query id -o tsv
                Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]$subId"

          - task: Bash@3
            displayName: 'Terraform Apply'
            inputs:
              targetType: 'inline'
              workingDirectory: ${{ variables.workingDirectory }}
              script: terraform apply tfplan -auto-approve -var-file="${{ parameters.environment }}.tfvars"
            env:
              ARM_USE_OIDC: $(setAuthVarsApply.ARM_USE_OIDC)
              ARM_OIDC_TOKEN: $(setAuthVarsApply.ARM_OIDC_TOKEN)
              ARM_CLIENT_ID: $(setAuthVarsApply.ARM_CLIENT_ID)
              ARM_TENANT_ID: $(setAuthVarsApply.ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(setAuthVarsApply.ARM_SUBSCRIPTION_ID)