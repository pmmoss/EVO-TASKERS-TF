parameters:
  - name: environment
    type: string
    default: 'dev'
  - name: projectName
    type: string
    default: 'evo-taskers'
  - name: appName
    type: string
    default: 'unlockbookings'

variables:
  - group: 'terraform-backend'
  - name: workingDirectory
    value: 'project/${{ parameters.projectName }}/${{ parameters.appName }}'
  - name: terraformVersion
    value: '1.5.0'

stages:
- stage: Plan
  displayName: 'Terraform Plan - ${{ parameters.environment }}'
  jobs:
  - job: Plan
    displayName: 'Plan Infrastructure'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      displayName: 'Checkout Code'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Set OIDC Auth Variables'
      name: setAuthVars
      inputs:
        azureSubscription: 'EVO-Taskers-Sandbox'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        addSpnToEnvironment: true
        inlineScript: |
          echo "Setting authentication variables..."
          
          # For Workload Identity Federation (OIDC)
          if [ -n "$idToken" ]; then
            echo "Using Workload Identity Federation (OIDC)"
            echo "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]true"
            echo "##vso[task.setvariable variable=ARM_OIDC_TOKEN;isOutput=true]$idToken"
          elif [ -n "$servicePrincipalKey" ]; then
            echo "Using Service Principal with secret"
            echo "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]false"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;isOutput=true]$servicePrincipalKey"
          fi
          
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]$servicePrincipalId"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]$tenantId"
          
          SUB_ID=$(az account show --query id -o tsv)
          echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]$SUB_ID"
          
          echo "Client ID: $servicePrincipalId"
          echo "Tenant ID: $tenantId"
          echo "Subscription ID: $SUB_ID"
          echo "Authentication configured successfully"

    - task: Bash@3
      displayName: 'Verify Authentication Variables'
      inputs:
        targetType: 'inline'
        script: |
          echo "=== Authentication Debug Info ==="
          echo "ARM_USE_OIDC: ${ARM_USE_OIDC}"
          echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID}"
          echo "ARM_TENANT_ID: ${ARM_TENANT_ID}"
          echo "ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID}"
          echo "ARM_USE_CLI: ${ARM_USE_CLI}"
          
          if [ -n "${ARM_OIDC_TOKEN}" ]; then
            echo "ARM_OIDC_TOKEN: [SET - length: ${#ARM_OIDC_TOKEN}]"
          else
            echo "ARM_OIDC_TOKEN: [NOT SET]"
          fi
          
          if [ -n "${ARM_CLIENT_SECRET}" ]; then
            echo "ARM_CLIENT_SECRET: [SET - length: ${#ARM_CLIENT_SECRET}]"
          else
            echo "ARM_CLIENT_SECRET: [NOT SET]"
          fi
          
          echo "================================="
      env:
        ARM_USE_OIDC: $(setAuthVars.ARM_USE_OIDC)
        ARM_OIDC_TOKEN: $(setAuthVars.ARM_OIDC_TOKEN)
        ARM_CLIENT_ID: $(setAuthVars.ARM_CLIENT_ID)
        ARM_TENANT_ID: $(setAuthVars.ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(setAuthVars.ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_SECRET: $(setAuthVars.ARM_CLIENT_SECRET)
        ARM_USE_CLI: false

    - task: Bash@3
      displayName: 'Terraform Init'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
        script: |
          set -e
          echo "Initializing Terraform..."
          echo "Working Directory: $(pwd)"
          
          # Explicitly disable Azure CLI authentication
          export ARM_USE_CLI=false
          
          terraform init \
            -backend-config="resource_group_name=$(BACKEND_RESOURCE_GROUP_NAME)" \
            -backend-config="storage_account_name=$(BACKEND_STORAGE_ACCOUNT_NAME)" \
            -backend-config="container_name=$(BACKEND_CONTAINER_NAME)" \
            -backend-config="key=${{ parameters.projectName }}-${{ parameters.appName }}-${{ parameters.environment }}.tfstate"
          
          echo "Terraform initialized successfully"
      env:
        ARM_USE_OIDC: $(setAuthVars.ARM_USE_OIDC)
        ARM_OIDC_TOKEN: $(setAuthVars.ARM_OIDC_TOKEN)
        ARM_CLIENT_ID: $(setAuthVars.ARM_CLIENT_ID)
        ARM_TENANT_ID: $(setAuthVars.ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(setAuthVars.ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_SECRET: $(setAuthVars.ARM_CLIENT_SECRET)
        ARM_USE_CLI: false

    - task: Bash@3
      displayName: 'Terraform Validate'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
        script: |
          set -e
          echo "Validating Terraform configuration..."
          terraform validate
          echo "Validation successful"
      env:
        ARM_USE_OIDC: $(setAuthVars.ARM_USE_OIDC)
        ARM_OIDC_TOKEN: $(setAuthVars.ARM_OIDC_TOKEN)
        ARM_CLIENT_ID: $(setAuthVars.ARM_CLIENT_ID)
        ARM_TENANT_ID: $(setAuthVars.ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(setAuthVars.ARM_SUBSCRIPTION_ID)

    - task: Bash@3
      displayName: 'Terraform Plan'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
        script: |
          set -e
          echo "Planning Terraform changes for ${{ parameters.environment }}..."
          
          terraform plan \
            -var-file="${{ parameters.environment }}.tfvars" \
            -out=tfplan \
            -detailed-exitcode || export TF_EXIT_CODE=$?
          
          # Exit codes: 0 = no changes, 1 = error, 2 = changes present
          if [ ${TF_EXIT_CODE:-0} -eq 1 ]; then
            echo "##[error]Terraform plan failed"
            exit 1
          elif [ ${TF_EXIT_CODE:-0} -eq 2 ]; then
            echo "##[section]Changes detected - plan created successfully"
            echo "##vso[task.setvariable variable=changesPresent;isOutput=true]true"
          else
            echo "##[section]No changes detected"
            echo "##vso[task.setvariable variable=changesPresent;isOutput=true]false"
          fi
          
          echo "Terraform plan completed"
      env:
        ARM_USE_OIDC: $(setAuthVars.ARM_USE_OIDC)
        ARM_OIDC_TOKEN: $(setAuthVars.ARM_OIDC_TOKEN)
        ARM_CLIENT_ID: $(setAuthVars.ARM_CLIENT_ID)
        ARM_TENANT_ID: $(setAuthVars.ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(setAuthVars.ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_SECRET: $(setAuthVars.ARM_CLIENT_SECRET)
        ARM_USE_CLI: false

    - task: Bash@3
      displayName: 'Show Terraform Plan'
      condition: eq(variables['terraformPlan.changesPresent'], 'true')
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
        script: |
          echo "##[section]Terraform Plan Output:"
          terraform show tfplan
      env:
        ARM_USE_OIDC: $(setAuthVars.ARM_USE_OIDC)
        ARM_OIDC_TOKEN: $(setAuthVars.ARM_OIDC_TOKEN)
        ARM_CLIENT_ID: $(setAuthVars.ARM_CLIENT_ID)
        ARM_TENANT_ID: $(setAuthVars.ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(setAuthVars.ARM_SUBSCRIPTION_ID)

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Terraform Plan'
      condition: eq(variables['terraformPlan.changesPresent'], 'true')
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
        artifact: 'terraform-plan-${{ parameters.environment }}'
        publishLocation: 'pipeline'

- stage: Apply
  displayName: 'Terraform Apply - ${{ parameters.environment }}'
  dependsOn: Plan
  condition: and(succeeded(), eq(dependencies.Plan.outputs['Plan.terraformPlan.changesPresent'], 'true'))
  jobs:
  - deployment: Apply
    displayName: 'Apply Infrastructure Changes'
    environment: '${{ parameters.projectName }}-${{ parameters.environment }}'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'Checkout Code'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Terraform Plan'
            inputs:
              buildType: 'current'
              artifactName: 'terraform-plan-${{ parameters.environment }}'
              targetPath: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Set OIDC Auth Variables (Apply)'
            name: setAuthVarsApply
            inputs:
              azureSubscription: 'EVO-Taskers-Sandbox'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                echo "Setting authentication variables for apply..."
                
                # For Workload Identity Federation (OIDC)
                if [ -n "$idToken" ]; then
                  echo "Using Workload Identity Federation (OIDC)"
                  echo "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]true"
                  echo "##vso[task.setvariable variable=ARM_OIDC_TOKEN;isOutput=true]$idToken"
                elif [ -n "$servicePrincipalKey" ]; then
                  echo "Using Service Principal with secret"
                  echo "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]false"
                  echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;isOutput=true]$servicePrincipalKey"
                fi
                
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]$servicePrincipalId"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]$tenantId"
                
                SUB_ID=$(az account show --query id -o tsv)
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]$SUB_ID"
                
                echo "Client ID: $servicePrincipalId"
                echo "Tenant ID: $tenantId"
                echo "Subscription ID: $SUB_ID"
                echo "Authentication configured successfully"

          - task: Bash@3
            displayName: 'Verify Authentication Variables (Apply)'
            inputs:
              targetType: 'inline'
              script: |
                echo "=== Authentication Debug Info (Apply) ==="
                echo "ARM_USE_OIDC: ${ARM_USE_OIDC}"
                echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID}"
                echo "ARM_TENANT_ID: ${ARM_TENANT_ID}"
                echo "ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID}"
                echo "ARM_USE_CLI: ${ARM_USE_CLI}"
                
                if [ -n "${ARM_OIDC_TOKEN}" ]; then
                  echo "ARM_OIDC_TOKEN: [SET - length: ${#ARM_OIDC_TOKEN}]"
                else
                  echo "ARM_OIDC_TOKEN: [NOT SET]"
                fi
                
                if [ -n "${ARM_CLIENT_SECRET}" ]; then
                  echo "ARM_CLIENT_SECRET: [SET - length: ${#ARM_CLIENT_SECRET}]"
                else
                  echo "ARM_CLIENT_SECRET: [NOT SET]"
                fi
                
                echo "================================="
            env:
              ARM_USE_OIDC: $(setAuthVarsApply.ARM_USE_OIDC)
              ARM_OIDC_TOKEN: $(setAuthVarsApply.ARM_OIDC_TOKEN)
              ARM_CLIENT_ID: $(setAuthVarsApply.ARM_CLIENT_ID)
              ARM_TENANT_ID: $(setAuthVarsApply.ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(setAuthVarsApply.ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_SECRET: $(setAuthVarsApply.ARM_CLIENT_SECRET)
              ARM_USE_CLI: false
              ARM_CLIENT_SECRET: $(setAuthVarsApply.ARM_CLIENT_SECRET)
              ARM_USE_CLI: false

          - task: Bash@3
            displayName: 'Terraform Init (Apply Stage)'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
              script: |
                set -e
                echo "Re-initializing Terraform for apply stage..."
                
                # Explicitly disable Azure CLI authentication
                export ARM_USE_CLI=false
                
                terraform init \
                  -backend-config="resource_group_name=$(BACKEND_RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(BACKEND_STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(BACKEND_CONTAINER_NAME)" \
                  -backend-config="key=${{ parameters.projectName }}-${{ parameters.appName }}-${{ parameters.environment }}.tfstate"
                
                echo "Terraform initialized successfully"
            env:
              ARM_USE_OIDC: $(setAuthVarsApply.ARM_USE_OIDC)
              ARM_OIDC_TOKEN: $(setAuthVarsApply.ARM_OIDC_TOKEN)
              ARM_CLIENT_ID: $(setAuthVarsApply.ARM_CLIENT_ID)
              ARM_TENANT_ID: $(setAuthVarsApply.ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(setAuthVarsApply.ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_SECRET: $(setAuthVarsApply.ARM_CLIENT_SECRET)
              ARM_USE_CLI: false

          - task: Bash@3
            displayName: 'Terraform Apply'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
              script: |
                set -e
                echo "##[section]Applying Terraform changes for ${{ parameters.environment }}..."
                echo "Working Directory: $(pwd)"
                
                if [ ! -f "tfplan" ]; then
                  echo "##[error]Plan file not found!"
                  exit 1
                fi
                
                terraform apply -auto-approve tfplan
                
                echo "##[section]Terraform apply completed successfully!"
            env:
              ARM_USE_OIDC: $(setAuthVarsApply.ARM_USE_OIDC)
              ARM_OIDC_TOKEN: $(setAuthVarsApply.ARM_OIDC_TOKEN)
              ARM_CLIENT_ID: $(setAuthVarsApply.ARM_CLIENT_ID)
              ARM_TENANT_ID: $(setAuthVarsApply.ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(setAuthVarsApply.ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_SECRET: $(setAuthVarsApply.ARM_CLIENT_SECRET)
              ARM_USE_CLI: false

          - task: Bash@3
            displayName: 'Terraform Output'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
              script: |
                echo "##[section]Terraform Outputs:"
                terraform output
            env:
              ARM_USE_OIDC: $(setAuthVarsApply.ARM_USE_OIDC)
              ARM_OIDC_TOKEN: $(setAuthVarsApply.ARM_OIDC_TOKEN)
              ARM_CLIENT_ID: $(setAuthVarsApply.ARM_CLIENT_ID)
              ARM_TENANT_ID: $(setAuthVarsApply.ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(setAuthVarsApply.ARM_SUBSCRIPTION_ID)