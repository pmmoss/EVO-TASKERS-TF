# Azure DevOps Pipeline for Terraform
# Supports: project/<PROJECT>/<APP> structure with dev/qa/prod environments

parameters:
  - name: environment
    displayName: 'Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - qa
      - prod
  
  - name: projectName
    displayName: 'Project Name'
    type: string
    default: 'evo-taskers'
  
  - name: appName
    displayName: 'Application Name'
    type: string
    default: 'automateddatafeed'
    values:
      - common
      - automateddatafeed
      - autoopenshorex
      - dashboard
      - dashboardfrontend
      - sendgridfunction
      - unlockbookings

variables:
  - group: 'terraform-backend'
  - name: workingDirectory
    value: 'project/${{ parameters.projectName }}/${{ parameters.appName }}'
  - name: terraformVersion
    value: '1.13.0'
  - name: serviceConnection
    value: 'EVO-Taskers-Sandbox'

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'project/**'
      - 'modules/**'

pr:
  branches:
    include:
      - main
  paths:
    include:
      - 'project/**'
      - 'modules/**'

stages:
  - stage: Plan
    displayName: 'Plan - ${{ parameters.environment }}'
    jobs:
      - job: TerraformPlan
        displayName: 'Terraform Plan'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - checkout: self
            fetchDepth: 1

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(terraformVersion)'

          - task: AzureCLI@2
            displayName: 'Setup Authentication'
            name: auth
            inputs:
              azureSubscription: '$(serviceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                echo "=== DEBUG: Authentication Variables ==="
                echo "servicePrincipalId: ${servicePrincipalId:-(empty)}"
                echo "tenantId: ${tenantId:-(empty)}"
                echo "idToken present: $([ -n "$idToken" ] && echo 'YES' || echo 'NO')"
                echo "idToken length: ${#idToken}"
                echo "servicePrincipalKey present: $([ -n "$servicePrincipalKey" ] && echo 'YES' || echo 'NO')"
                echo "servicePrincipalKey length: ${#servicePrincipalKey}"
                echo "======================================"
                
                SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                echo "Subscription ID: $SUBSCRIPTION_ID"
                
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]$servicePrincipalId"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]$tenantId"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]$SUBSCRIPTION_ID"
                
                if [ -n "$idToken" ]; then
                  echo "✓ Using OIDC authentication"
                  echo "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]true"
                  echo "##vso[task.setvariable variable=ARM_OIDC_TOKEN;isOutput=true]$idToken"
                else
                  echo "✗ Using Service Principal authentication (OIDC token not available)"
                  echo "##[warning]OIDC is not configured - falling back to client secret"
                  echo "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]false"
                  echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;isOutput=true]$servicePrincipalKey"
                fi

          - task: Bash@3
            displayName: 'Terraform Init'
            inputs:
              targetType: 'inline'
              addSpnToEnvironment: true
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
              script: |
                echo "=== DEBUG: Terraform Environment Variables ==="
                echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID:-(empty)}"
                echo "ARM_TENANT_ID: ${ARM_TENANT_ID:-(empty)}"
                echo "ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID:-(empty)}"
                echo "ARM_USE_OIDC: ${ARM_USE_OIDC:-(empty)}"
                echo "ARM_OIDC_TOKEN length: ${#ARM_OIDC_TOKEN}"
                echo "ARM_CLIENT_SECRET length: ${#ARM_CLIENT_SECRET}"
                echo "ARM_USE_CLI: ${ARM_USE_CLI:-(empty)}"
                echo "=============================================="
                
                terraform init \
                  -backend-config="resource_group_name=$(BACKEND_RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(BACKEND_STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(BACKEND_CONTAINER_NAME)" \
                  -backend-config="key=${{ parameters.projectName }}-${{ parameters.appName }}-${{ parameters.environment }}.tfstate" \
                  -reconfigure
            env:
              ARM_CLIENT_ID: $(auth.ARM_CLIENT_ID)
              ARM_TENANT_ID: $(auth.ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(auth.ARM_SUBSCRIPTION_ID)
              ARM_USE_OIDC: $(auth.ARM_USE_OIDC)
              ARM_OIDC_TOKEN: $(auth.ARM_OIDC_TOKEN)
              ARM_CLIENT_SECRET: $(auth.ARM_CLIENT_SECRET)
              ARM_USE_CLI: false

          - task: Bash@3
            displayName: 'Terraform Validate'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
              script: terraform validate

          - task: Bash@3
            displayName: 'Terraform Plan'
            name: plan
            inputs:
              targetType: 'inline'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
              script: |
                TFVARS_FILE="${{ parameters.environment }}.tfvars"
                TFVARS_ARG=$([ -f "$TFVARS_FILE" ] && echo "-var-file=$TFVARS_FILE" || echo "")
                
                set +e
                terraform plan $TFVARS_ARG -out=tfplan -detailed-exitcode
                EXIT_CODE=$?
                set -e
                
                if [ $EXIT_CODE -eq 0 ]; then
                  echo "No changes detected"
                  echo "##vso[task.setvariable variable=hasChanges;isOutput=true]false"
                elif [ $EXIT_CODE -eq 2 ]; then
                  echo "Changes detected"
                  echo "##vso[task.setvariable variable=hasChanges;isOutput=true]true"
                  terraform show -no-color tfplan
                else
                  echo "Plan failed"
                  exit 1
                fi
            env:
              ARM_CLIENT_ID: $(auth.ARM_CLIENT_ID)
              ARM_TENANT_ID: $(auth.ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(auth.ARM_SUBSCRIPTION_ID)
              ARM_USE_OIDC: $(auth.ARM_USE_OIDC)
              ARM_OIDC_TOKEN: $(auth.ARM_OIDC_TOKEN)
              ARM_CLIENT_SECRET: $(auth.ARM_CLIENT_SECRET)
              ARM_USE_CLI: false

          - task: ArchiveFiles@2
            displayName: 'Archive Plan'
            condition: eq(variables['plan.hasChanges'], 'true')
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/terraform.tar.gz'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Plan'
            condition: eq(variables['plan.hasChanges'], 'true')
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'terraform-plan'

  # - stage: Apply
  #   displayName: 'Apply - ${{ parameters.environment }}'
  #   dependsOn: Plan
  #   condition: and(succeeded(), eq(dependencies.Plan.outputs['TerraformPlan.plan.hasChanges'], 'true'))
  #   jobs:
  #     - deployment: TerraformApply
  #       displayName: 'Apply'
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       environment: '${{ parameters.projectName }}-${{ parameters.environment }}'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - checkout: self
  #                 fetchDepth: 1

  #               - task: DownloadPipelineArtifact@2
  #                 displayName: 'Download Plan'
  #                 inputs:
  #                   artifactName: 'terraform-plan'
  #                   targetPath: '$(Pipeline.Workspace)/terraform-plan'

  #               - task: ExtractFiles@1
  #                 displayName: 'Extract Plan'
  #                 inputs:
  #                   archiveFilePatterns: '$(Pipeline.Workspace)/terraform-plan/terraform.tar.gz'
  #                   destinationFolder: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'

  #               - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  #                 displayName: 'Install Terraform'
  #                 inputs:
  #                   terraformVersion: '$(terraformVersion)'

  #               - task: AzureCLI@2
  #                 displayName: 'Setup Authentication'
  #                 name: auth
  #                 inputs:
  #                   azureSubscription: '$(serviceConnection)'
  #                   scriptType: 'bash'
  #                   addSpnToEnvironment: true
  #                   inlineScript: |
  #                     SUBSCRIPTION_ID=$(az account show --query id -o tsv)
  #                     echo "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]$servicePrincipalId"
  #                     echo "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]$tenantId"
  #                     echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]$SUBSCRIPTION_ID"
                      
  #                     if [ -n "$idToken" ]; then
  #                       echo "Using OIDC authentication"
  #                       echo "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]true"
  #                       echo "##vso[task.setvariable variable=ARM_OIDC_TOKEN;isOutput=true]$idToken"
  #                     else
  #                       echo "Using Service Principal authentication"
  #                       echo "##vso[task.setvariable variable=ARM_USE_OIDC;isOutput=true]false"
  #                       echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;isOutput=true]$servicePrincipalKey"
  #                     fi

  #               - task: Bash@3
  #                 displayName: 'Terraform Apply'
  #                 inputs:
  #                   targetType: 'inline'
  #                   workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
  #                   script: terraform apply -auto-approve tfplan
  #                 env:
  #                   ARM_CLIENT_ID: $(auth.ARM_CLIENT_ID)
  #                   ARM_TENANT_ID: $(auth.ARM_TENANT_ID)
  #                   ARM_SUBSCRIPTION_ID: $(auth.ARM_SUBSCRIPTION_ID)
  #                   ARM_USE_OIDC: $(auth.ARM_USE_OIDC)
  #                   ARM_OIDC_TOKEN: $(auth.ARM_OIDC_TOKEN)
  #                   ARM_CLIENT_SECRET: $(auth.ARM_CLIENT_SECRET)
  #                   ARM_USE_CLI: false

  #               - task: Bash@3
  #                 displayName: 'Show Outputs'
  #                 continueOnError: true
  #                 inputs:
  #                   targetType: 'inline'
  #                   workingDirectory: '$(System.DefaultWorkingDirectory)/$(workingDirectory)'
  #                   script: terraform output -json
  #                 env:
  #                   ARM_CLIENT_ID: $(auth.ARM_CLIENT_ID)
  #                   ARM_TENANT_ID: $(auth.ARM_TENANT_ID)
  #                   ARM_SUBSCRIPTION_ID: $(auth.ARM_SUBSCRIPTION_ID)
  #                   ARM_USE_OIDC: $(auth.ARM_USE_OIDC)
  #                   ARM_OIDC_TOKEN: $(auth.ARM_OIDC_TOKEN)
  #                   ARM_CLIENT_SECRET: $(auth.ARM_CLIENT_SECRET)
  #                   ARM_USE_CLI: false