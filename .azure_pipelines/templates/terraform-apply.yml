# Template: Terraform Apply
# Applies Terraform plan and shows outputs

parameters:
  - name: workingDirectory
    type: string
  - name: authStepName
    type: string
    default: 'auth'

steps:
  - task: Bash@3
    displayName: 'Verify State and Apply'
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.workingDirectory }}'
      script: |
        echo "=== DEBUG: Terraform Environment Variables ==="
        echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID:-(empty)}"
        echo "ARM_TENANT_ID: ${ARM_TENANT_ID:-(empty)}"
        echo "ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID:-(empty)}"
        echo "ARM_USE_OIDC: ${ARM_USE_OIDC:-(empty)}"
        echo "ARM_OIDC_TOKEN length: ${#ARM_OIDC_TOKEN}"
        echo "ARM_CLIENT_SECRET length: ${#ARM_CLIENT_SECRET}"
        echo "ARM_USE_CLI: ${ARM_USE_CLI:-(empty)}"
        echo "=============================================="
        
        # Check if plan file exists
        if [ ! -f "tfplan" ]; then
          echo "##[error]Plan file not found. Cannot apply."
          exit 1
        fi
        
        # Refresh state to check for changes
        echo "Checking state for changes..."
        terraform state list > /dev/null 2>&1 || echo "State is empty or new"
        
        # Apply the plan
        echo "Applying Terraform plan..."
        set +e
        terraform apply -auto-approve tfplan
        APPLY_EXIT=$?
        set -e
        
        if [ $APPLY_EXIT -eq 0 ]; then
          echo "âœ“ Apply completed successfully"
        elif [ $APPLY_EXIT -eq 1 ]; then
          echo "##[error]Apply failed - check errors above"
          echo ""
          echo "Common causes:"
          echo "1. State was changed by another operation (stale plan)"
          echo "2. Resources already exist or were deleted"
          echo "3. Permissions issue"
          echo ""
          echo "To resolve stale plan errors:"
          echo "- Ensure no other pipelines are running"
          echo "- Re-run the pipeline to generate a fresh plan"
          exit 1
        fi
    env:
      ARM_CLIENT_ID: $(${{ parameters.authStepName }}.ARM_CLIENT_ID)
      ARM_TENANT_ID: $(${{ parameters.authStepName }}.ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(${{ parameters.authStepName }}.ARM_SUBSCRIPTION_ID)
      ARM_USE_OIDC: $(${{ parameters.authStepName }}.ARM_USE_OIDC)
      ARM_OIDC_TOKEN: $(${{ parameters.authStepName }}.ARM_OIDC_TOKEN)
      ARM_CLIENT_SECRET: $(${{ parameters.authStepName }}.ARM_CLIENT_SECRET)
      ARM_USE_CLI: false

  - task: Bash@3
    displayName: 'Show Outputs'
    continueOnError: true
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.workingDirectory }}'
      script: terraform output -json
    env:
      ARM_CLIENT_ID: $(${{ parameters.authStepName }}.ARM_CLIENT_ID)
      ARM_TENANT_ID: $(${{ parameters.authStepName }}.ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(${{ parameters.authStepName }}.ARM_SUBSCRIPTION_ID)
      ARM_USE_OIDC: $(${{ parameters.authStepName }}.ARM_USE_OIDC)
      ARM_OIDC_TOKEN: $(${{ parameters.authStepName }}.ARM_OIDC_TOKEN)
      ARM_CLIENT_SECRET: $(${{ parameters.authStepName }}.ARM_CLIENT_SECRET)
      ARM_USE_CLI: false

