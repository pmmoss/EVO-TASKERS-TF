# Template: Terraform Plan
# Validates and plans Terraform changes

parameters:
  - name: workingDirectory
    type: string
  - name: environment
    type: string
  - name: authStepName
    type: string
    default: 'auth'

steps:
  - task: Bash@3
    displayName: 'Terraform Validate'
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.workingDirectory }}'
      script: terraform validate

  - task: Bash@3
    displayName: 'Terraform Plan'
    name: plan
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.workingDirectory }}'
      script: |
        TFVARS_FILE="${{ parameters.environment }}.tfvars"
        TFVARS_ARG=$([ -f "$TFVARS_FILE" ] && echo "-var-file=$TFVARS_FILE" || echo "")
        
        set +e
        terraform plan $TFVARS_ARG -out=tfplan -detailed-exitcode
        EXIT_CODE=$?
        set -e
        
        if [ $EXIT_CODE -eq 0 ]; then
          echo "No changes detected"
          echo "##vso[task.setvariable variable=hasChanges;isOutput=true]false"
        elif [ $EXIT_CODE -eq 2 ]; then
          echo "Changes detected"
          echo "##vso[task.setvariable variable=hasChanges;isOutput=true]true"
          terraform show -no-color tfplan
        else
          echo "Plan failed"
          exit 1
        fi
    env:
      ARM_CLIENT_ID: $(${{ parameters.authStepName }}.ARM_CLIENT_ID)
      ARM_TENANT_ID: $(${{ parameters.authStepName }}.ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(${{ parameters.authStepName }}.ARM_SUBSCRIPTION_ID)
      ARM_USE_OIDC: $(${{ parameters.authStepName }}.ARM_USE_OIDC)
      ARM_OIDC_TOKEN: $(${{ parameters.authStepName }}.ARM_OIDC_TOKEN)
      ARM_CLIENT_SECRET: $(${{ parameters.authStepName }}.ARM_CLIENT_SECRET)
      ARM_USE_CLI: false

  - task: ArchiveFiles@2
    displayName: 'Archive Plan'
    condition: eq(variables['plan.hasChanges'], 'true')
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/${{ parameters.workingDirectory }}'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/terraform.tar.gz'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Plan'
    condition: eq(variables['plan.hasChanges'], 'true')
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'terraform-plan'

