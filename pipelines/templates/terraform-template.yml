# Reusable Terraform Template
# This template handles terraform init, validate, plan, and apply operations
# with proper security and best practices

parameters:
  - name: workingDirectory
    type: string
  - name: environment
    type: string
  - name: serviceConnection
    type: string
  - name: tfVarsFile
    type: string
    default: ''
  - name: terraformVersion
    type: string
    default: 'latest'
  - name: backendResourceGroup
    type: string
  - name: backendStorageAccount
    type: string
  - name: backendContainerName
    type: string
    default: 'tfstate'
  - name: backendStateKey
    type: string
  - name: useWorkspaces
    type: boolean
    default: false
  - name: additionalTfVars
    type: string
    default: ''
  - name: planOnly
    type: boolean
    default: false

steps:
  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}

  # Setup backend configuration
  - task: AzureCLI@2
    displayName: 'Configure Backend'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Setting up backend configuration..."
        
        # Create backend config file
        cat > backend-config.tfvars << EOF
        resource_group_name  = "${{ parameters.backendResourceGroup }}"
        storage_account_name = "${{ parameters.backendStorageAccount }}"
        container_name       = "${{ parameters.backendContainerName }}"
        key                  = "${{ parameters.backendStateKey }}"
        EOF
        
        echo "Backend configuration created"
        cat backend-config.tfvars
      workingDirectory: ${{ parameters.workingDirectory }}
      addSpnToEnvironment: true

  # Terraform Init
  - task: AzureCLI@2
    displayName: 'Terraform Init'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        echo "Initializing Terraform..."
        terraform init \
          -backend-config=backend-config.tfvars \
          -upgrade
        
        echo "Terraform initialization complete"
      workingDirectory: ${{ parameters.workingDirectory }}
      addSpnToEnvironment: true

  # Create or Select Workspace (if using workspaces)
  - ${{ if eq(parameters.useWorkspaces, true) }}:
    - task: AzureCLI@2
      displayName: 'Select Terraform Workspace'
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "Managing workspace: ${{ parameters.environment }}"
          
          # Create workspace if it doesn't exist, otherwise select it
          terraform workspace select ${{ parameters.environment }} || terraform workspace new ${{ parameters.environment }}
          
          echo "Current workspace:"
          terraform workspace show
        workingDirectory: ${{ parameters.workingDirectory }}
        addSpnToEnvironment: true

  # Terraform Validate
  - task: AzureCLI@2
    displayName: 'Terraform Validate'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        echo "Validating Terraform configuration..."
        terraform validate
        echo "Validation successful"
      workingDirectory: ${{ parameters.workingDirectory }}
      addSpnToEnvironment: true

  # Terraform Format Check
  - task: AzureCLI@2
    displayName: 'Terraform Format Check'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        echo "Checking Terraform formatting..."
        if ! terraform fmt -check -recursive -diff; then
          echo "##vso[task.logissue type=warning]Terraform files are not properly formatted. Run 'terraform fmt -recursive' locally."
          # Don't fail the build, just warn
        fi
      workingDirectory: ${{ parameters.workingDirectory }}
      addSpnToEnvironment: true
      failOnStandardError: false

  # Security Scan with Checkov
  - task: AzureCLI@2
    displayName: 'Security Scan (Checkov)'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Installing Checkov..."
        pip install checkov --quiet
        
        echo "Running security scan..."
        checkov -d . --framework terraform --soft-fail --output cli --output junitxml --output-file-path console,results.xml || true
        
        # Check if results file exists and parse it
        if [ -f results.xml ]; then
          echo "Security scan completed. Check results for details."
        fi
      workingDirectory: ${{ parameters.workingDirectory }}
      addSpnToEnvironment: true
      failOnStandardError: false

  # Publish Checkov Results
  - task: PublishTestResults@2
    displayName: 'Publish Security Scan Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/results.xml'
      searchFolder: ${{ parameters.workingDirectory }}
      mergeTestResults: true
      testRunTitle: 'Terraform Security Scan - ${{ parameters.environment }}'
      failTaskOnFailedTests: false

  # Terraform Plan
  - task: AzureCLI@2
    displayName: 'Terraform Plan'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        echo "Planning Terraform changes for environment: ${{ parameters.environment }}"
        
        PLAN_ARGS="-out=tfplan -detailed-exitcode"
        
        # Add tfvars file if specified
        TFVARS_FILE="${{ parameters.tfVarsFile }}"
        if [ -n "$TFVARS_FILE" ]; then
          PLAN_ARGS="$PLAN_ARGS -var-file=$TFVARS_FILE"
        fi
        
        # Add additional tf vars if specified
        ADDITIONAL_VARS="${{ parameters.additionalTfVars }}"
        if [ -n "$ADDITIONAL_VARS" ]; then
          PLAN_ARGS="$PLAN_ARGS $ADDITIONAL_VARS"
        fi
        
        echo "Running: terraform plan $PLAN_ARGS"
        
        # Run terraform plan
        # Exit code 0 = no changes, 1 = error, 2 = changes present
        set +e
        terraform plan $PLAN_ARGS
        PLAN_EXIT_CODE=$?
        set -e
        
        if [ $PLAN_EXIT_CODE -eq 1 ]; then
          echo "##vso[task.logissue type=error]Terraform plan failed!"
          exit 1
        elif [ $PLAN_EXIT_CODE -eq 2 ]; then
          echo "##vso[task.logissue type=warning]Changes detected in Terraform plan"
          echo "##vso[task.setvariable variable=TERRAFORM_PLAN_HAS_CHANGES;isOutput=true]true"
        else
          echo "No changes detected"
          echo "##vso[task.setvariable variable=TERRAFORM_PLAN_HAS_CHANGES;isOutput=true]false"
        fi
        
        # Show plan in human-readable format
        echo "=== Terraform Plan Summary ==="
        terraform show tfplan
      workingDirectory: ${{ parameters.workingDirectory }}
      addSpnToEnvironment: true
    name: TerraformPlan

  # Save Plan Artifact
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Plan'
    inputs:
      targetPath: '${{ parameters.workingDirectory }}/tfplan'
      artifactName: 'tfplan-${{ parameters.environment }}'
      publishLocation: 'pipeline'

  # Terraform Apply (only if not planOnly)
  - ${{ if eq(parameters.planOnly, false) }}:
    - task: AzureCLI@2
      displayName: 'Terraform Apply'
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "Applying Terraform changes for environment: ${{ parameters.environment }}"
          
          # Apply the plan
          terraform apply -auto-approve tfplan
          
          echo "Terraform apply completed successfully"
          
          # Show outputs
          echo "=== Terraform Outputs ==="
          terraform output
        workingDirectory: ${{ parameters.workingDirectory }}
        addSpnToEnvironment: true

  # Export Terraform Outputs
  - ${{ if eq(parameters.planOnly, false) }}:
    - task: AzureCLI@2
      displayName: 'Export Terraform Outputs'
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "Exporting Terraform outputs..."
          
          # Export outputs as JSON
          terraform output -json > terraform-outputs.json
          
          echo "Outputs exported to terraform-outputs.json"
        workingDirectory: ${{ parameters.workingDirectory }}
        addSpnToEnvironment: true

  # Publish Outputs Artifact
  - ${{ if eq(parameters.planOnly, false) }}:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Terraform Outputs'
      condition: succeededOrFailed()
      inputs:
        targetPath: '${{ parameters.workingDirectory }}/terraform-outputs.json'
        artifactName: 'terraform-outputs-${{ parameters.environment }}'
        publishLocation: 'pipeline'

