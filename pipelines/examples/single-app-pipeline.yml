# Example: Single Application Pipeline
# This is a simplified pipeline for deploying a single application
# Use this as a template for application-specific pipelines

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - project/evo-taskers/automateddatafeed/*

pr:
  branches:
    include:
      - main
      - develop

variables:
  - group: 'terraform-backend'
  - group: 'evo-taskers-apps'
  - name: terraformVersion
    value: 'latest'
  - name: appName
    value: 'automateddatafeed'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/project/evo-taskers/automateddatafeed'

stages:
  # ============================================
  # DEVELOPMENT
  # ============================================
  - stage: Dev
    displayName: 'Development'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
    jobs:
      - job: Deploy
        displayName: 'Plan & Apply'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - template: ../templates/terraform-template.yml
            parameters:
              workingDirectory: $(workingDirectory)
              environment: 'dev'
              serviceConnection: '$(DEV_SERVICE_CONNECTION)'
              tfVarsFile: 'dev.tfvars'
              terraformVersion: $(terraformVersion)
              backendResourceGroup: '$(BACKEND_RESOURCE_GROUP_NAME)'
              backendStorageAccount: '$(BACKEND_STORAGE_ACCOUNT_NAME)'
              backendContainerName: '$(BACKEND_CONTAINER_NAME)'
              backendStateKey: 'landing-zone/evo-taskers-$(appName).tfstate'
              useWorkspaces: true
              planOnly: false

  # ============================================
  # QA
  # ============================================
  - stage: QA
    displayName: 'QA'
    dependsOn: Dev
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: Deploy
        displayName: 'Plan & Apply'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'evo-taskers-$(appName)-qa'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - template: ../templates/terraform-template.yml
                  parameters:
                    workingDirectory: $(workingDirectory)
                    environment: 'qa'
                    serviceConnection: '$(QA_SERVICE_CONNECTION)'
                    tfVarsFile: 'qa.tfvars'
                    terraformVersion: $(terraformVersion)
                    backendResourceGroup: '$(BACKEND_RESOURCE_GROUP_NAME)'
                    backendStorageAccount: '$(BACKEND_STORAGE_ACCOUNT_NAME)'
                    backendContainerName: '$(BACKEND_CONTAINER_NAME)'
                    backendStateKey: 'landing-zone/evo-taskers-$(appName).tfstate'
                    useWorkspaces: true
                    planOnly: false

  # ============================================
  # PRODUCTION
  # ============================================
  - stage: Prod
    displayName: 'Production'
    dependsOn: []
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - deployment: Deploy
        displayName: 'Plan & Apply'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'evo-taskers-$(appName)-prod'  # Requires manual approval
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - template: ../templates/terraform-template.yml
                  parameters:
                    workingDirectory: $(workingDirectory)
                    environment: 'prod'
                    serviceConnection: '$(PROD_SERVICE_CONNECTION)'
                    tfVarsFile: 'prod.tfvars'
                    terraformVersion: $(terraformVersion)
                    backendResourceGroup: '$(BACKEND_RESOURCE_GROUP_NAME)'
                    backendStorageAccount: '$(BACKEND_STORAGE_ACCOUNT_NAME)'
                    backendContainerName: '$(BACKEND_CONTAINER_NAME)'
                    backendStateKey: 'landing-zone/evo-taskers-$(appName).tfstate'
                    useWorkspaces: true
                    planOnly: false

